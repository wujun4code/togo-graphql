model Post {
  id           Int         @id @default(autoincrement())
  content      String
  published    Boolean     @default(false)
  authorId     Int
  author       User        @relation(fields: [authorId], references: [id])
  postedAt     DateTime    @unique() @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime    @unique() @updatedAt @db.Timestamptz(3)

  comments     PostComment[] @relation(name:"commentsTo")

  relatedMentionHistory MentionedHistory[] @relation(name:"MentionedHistoryRelatedPost")

}

model PostComment {
  id        Int     @id @default(autoincrement())

  postId    Int
  post      Post    @relation(name:"commentsTo", fields: [postId], references: [id], onDelete: Cascade)

  content   String

  threadId        Int?
  thread          PostComment?   @relation(name:"ThreadComments", fields: [threadId], references: [id], onDelete: Cascade)
  threadComments  PostComment[]  @relation("ThreadComments")

  replyToId        Int?
  replyTo          PostComment?   @relation(name:"ReplyComments", fields: [replyToId], references: [id], onDelete: Cascade)
  replyToComments  PostComment[]  @relation("ReplyComments")

  authorId  Int
  author    User    @relation(name:"comments", fields: [authorId], references: [id])

  createdAt  DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @updatedAt @db.Timestamptz(3)

  relatedMentionHistory          MentionedHistory[] @relation(name:"MentionedHistoryRelatedComment")
}

model Post_UserACLRule {
  id       Int     @id @default(autoincrement())
  userId Int

  user User @relation(fields: [userId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([userId, postId], name: "unique_user_post_constraint")
}

model Post_RoleACLRule {
  id       Int     @id @default(autoincrement())
  roleId Int

  role Role  @relation(fields: [roleId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([roleId, postId], name: "unique_role_post_constraint")
}

model Post_PublicACLRule {
  id       Int     @id @default(autoincrement())
  wildcard String

  readPermission  Boolean
  writePermission Boolean

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([wildcard, postId], name: "unique_wildcard_post_constraint")
}