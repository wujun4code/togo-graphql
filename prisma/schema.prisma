//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// client.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// follow.prisma
//

model Follow {
  id Int @id @default(autoincrement())

  followerId Int
  followeeId Int

  follower User @relation(name: "Followers", fields: [followerId], references: [id])
  followee User @relation(name: "Followees", fields: [followeeId], references: [id])

  followedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([followerId, followeeId])
}

//
// post.prisma
//

model Post {
  id                 Int                  @id @default(autoincrement())
  content            String
  published          Boolean              @default(false)
  authorId           Int
  author             User                 @relation(fields: [authorId], references: [id])
  postedAt           DateTime             @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime             @updatedAt @db.Timestamptz(3)
  Post_UserACLRule   Post_UserACLRule[]
  Post_RoleACLRule   Post_RoleACLRule[]
  Post_PublicACLRule Post_PublicACLRule[]
}

model Post_UserACLRule {
  id     Int @id @default(autoincrement())
  userId Int

  user User @relation(fields: [userId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "unique_user_post_constraint")
}

model Post_RoleACLRule {
  id     Int @id @default(autoincrement())
  roleId Int

  role Role @relation(fields: [roleId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([roleId, postId], name: "unique_role_post_constraint")
}

model Post_PublicACLRule {
  id       Int    @id @default(autoincrement())
  wildcard String

  readPermission  Boolean
  writePermission Boolean

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([wildcard, postId], name: "unique_wildcard_post_constraint")
}

//
// travel-plan.prisma
//

model TravelPlan {
  id            Int           @id @default(autoincrement())
  content       String?
  published     Boolean       @default(false)
  creatorId     Int
  creator       User          @relation(fields: [creatorId], references: [id])
  originId      Int
  origin        LocationPoint @relation("OriginLocationPoint", fields: [originId], references: [id])
  destinationId Int
  destination   LocationPoint @relation("DestinationLocationPoint", fields: [destinationId], references: [id])

  aclUserRules TravelPlan_UserACLRule[]

  aclRolesRules TravelPlan_RoleACLRule[]

  aclPublicRules TravelPlan_PublicACLRule[]
}

model LocationPoint {
  id             Int          @id @default(autoincrement())
  lat            Float
  lon            Float
  onOrigins      TravelPlan[] @relation("OriginLocationPoint")
  onDestinations TravelPlan[] @relation("DestinationLocationPoint")

  @@unique([lat, lon], name: "unique_lat_lon_constraint")
}

model TravelPlan_UserACLRule {
  id     Int @id @default(autoincrement())
  userId Int

  user User @relation(fields: [userId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  travelPlanId Int
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  @@unique([userId, travelPlanId], name: "unique_user_travelPlan_constraint")
}

model TravelPlan_RoleACLRule {
  id     Int @id @default(autoincrement())
  roleId Int

  role Role @relation(fields: [roleId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  travelPlanId Int
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  @@unique([roleId, travelPlanId], name: "unique_role_travelPlan_constraint")
}

model TravelPlan_PublicACLRule {
  id       Int    @id @default(autoincrement())
  wildcard String

  readPermission  Boolean
  writePermission Boolean

  travelPlanId Int
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  @@unique([wildcard, travelPlanId], name: "unique_wildcard_travelPlan_constraint")
}

//
// user-role.prisma
//

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  username     String  @unique
  friendlyName String?
  sub          String  @unique
  snsName      String  @unique @default(cuid())

  posts       Post[]
  travelPlans TravelPlan[]
  roles       RoleUser[]

  followers              Follow[]                 @relation(name: "Followers")
  followees              Follow[]                 @relation(name: "Followees")
  Post_UserACLRule       Post_UserACLRule[]
  TravelPlan_UserACLRule TravelPlan_UserACLRule[]
}

model Role {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique
  description            String
  users                  RoleUser[]
  Post_RoleACLRule       Post_RoleACLRule[]
  TravelPlan_RoleACLRule TravelPlan_RoleACLRule[]
}

model RoleUser {
  id     Int  @id @default(autoincrement())
  roleId Int
  userId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@index([roleId, userId], name: "unique_user_role")
}

//
// webhook.prisma
//

model WebHook {
  id      Int             @id @default(autoincrement())
  name    String          @unique
  url     String
  headers WebHookHeader[]
  events  WebHookEvent[]
}

model WebHookHeader {
  id        Int     @id @default(autoincrement())
  webHook   WebHook @relation(fields: [webHookId], references: [id])
  webHookId Int
  key       String
  value     String
}

model WebHookEvent {
  id        Int     @id @default(autoincrement())
  webHook   WebHook @relation(fields: [webHookId], references: [id])
  webHookId Int
  resource  String
  operation String
}
