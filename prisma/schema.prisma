//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// client.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// follow.prisma
//

model Follow {
  id Int @id @default(autoincrement())

  followerId Int
  followeeId Int

  follower User @relation(name: "AsFollowers", fields: [followerId], references: [id])
  followee User @relation(name: "AsFollowees", fields: [followeeId], references: [id])

  followedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([followerId, followeeId])
}

//
// organization.prisma
//

model Organization {
  id Int @id @default(autoincrement())

  relatedUserId Int  @unique
  relatedUser   User @relation("OrganizationRelatedUser", fields: [relatedUserId], references: [id])

  createdById Int
  createdBy   User @relation("OrganizationCreator", fields: [createdById], references: [id])

  createdAt DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @default(now()) @updatedAt @db.Timestamptz(3)

  usersWithRoles OrganizationUserRole[] @relation(name: "OrganizationOrganizationUserRole")

  managedRobots Robot[] @relation(name: "RobotsManagedByOrganization")
}

model OrganizationUserRole {
  id Int @id @default(autoincrement())

  organizationId Int
  organization   Organization @relation("OrganizationOrganizationUserRole", fields: [organizationId], references: [id])

  userId Int
  user   User @relation("UserOrganizationUserRole", fields: [userId], references: [id])

  roleId Int
  role   Role @relation("RoleOrganizationUserRole", fields: [roleId], references: [id])

  createdAt DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @default(now()) @updatedAt @db.Timestamptz(3)
}

//
// post.prisma
//

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  postedAt  DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @updatedAt @db.Timestamptz(3)

  comments           PostComment[]        @relation(name: "commentsTo")
  Post_UserACLRule   Post_UserACLRule[]
  Post_RoleACLRule   Post_RoleACLRule[]
  Post_PublicACLRule Post_PublicACLRule[]
}

model PostComment {
  id Int @id @default(autoincrement())

  postId Int
  post   Post @relation(name: "commentsTo", fields: [postId], references: [id], onDelete: Cascade)

  content String

  threadId       Int?
  thread         PostComment?  @relation(name: "ThreadComments", fields: [threadId], references: [id], onDelete: Cascade)
  threadComments PostComment[] @relation("ThreadComments")

  replyToId       Int?
  replyTo         PostComment?  @relation(name: "ReplyComments", fields: [replyToId], references: [id], onDelete: Cascade)
  replyToComments PostComment[] @relation("ReplyComments")

  authorId Int
  author   User @relation(name: "comments", fields: [authorId], references: [id])

  createdAt DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @updatedAt @db.Timestamptz(3)
}

model Post_UserACLRule {
  id     Int @id @default(autoincrement())
  userId Int

  user User @relation(fields: [userId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "unique_user_post_constraint")
}

model Post_RoleACLRule {
  id     Int @id @default(autoincrement())
  roleId Int

  role Role @relation(fields: [roleId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([roleId, postId], name: "unique_role_post_constraint")
}

model Post_PublicACLRule {
  id       Int    @id @default(autoincrement())
  wildcard String

  readPermission  Boolean
  writePermission Boolean

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([wildcard, postId], name: "unique_wildcard_post_constraint")
}

//
// robot.prisma
//

model Robot {
  id Int @id @default(autoincrement())

  hookUrl String?
  website String?

  createdAt DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @default(now()) @updatedAt @db.Timestamptz(3)

  headers RobotHookHeader[]

  managingOrganizationId Int?
  managingOrganization   Organization? @relation("RobotsManagedByOrganization", fields: [managingOrganizationId], references: [id])

  managingUserId Int?
  managingUser   User? @relation("RobotsBelongsToUser", fields: [managingUserId], references: [id])

  relatedUserId Int  @unique()
  relatedUser   User @relation("RobotRelatedUser", fields: [relatedUserId], references: [id])
}

model RobotHookHeader {
  id Int @id @default(autoincrement())

  robotId Int
  robot   Robot @relation(fields: [robotId], references: [id])

  key   String
  value String

  createdAt DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @default(now()) @updatedAt @db.Timestamptz(3)
}

//
// travel-plan.prisma
//

model TravelPlan {
  id            Int           @id @default(autoincrement())
  content       String?
  published     Boolean       @default(false)
  creatorId     Int
  creator       User          @relation(fields: [creatorId], references: [id])
  originId      Int
  origin        LocationPoint @relation("OriginLocationPoint", fields: [originId], references: [id])
  destinationId Int
  destination   LocationPoint @relation("DestinationLocationPoint", fields: [destinationId], references: [id])

  aclUserRules TravelPlan_UserACLRule[]

  aclRolesRules TravelPlan_RoleACLRule[]

  aclPublicRules TravelPlan_PublicACLRule[]
}

model LocationPoint {
  id             Int          @id @default(autoincrement())
  lat            Float
  lon            Float
  onOrigins      TravelPlan[] @relation("OriginLocationPoint")
  onDestinations TravelPlan[] @relation("DestinationLocationPoint")

  @@unique([lat, lon], name: "unique_lat_lon_constraint")
}

model TravelPlan_UserACLRule {
  id     Int @id @default(autoincrement())
  userId Int

  user User @relation(fields: [userId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  travelPlanId Int
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  @@unique([userId, travelPlanId], name: "unique_user_travelPlan_constraint")
}

model TravelPlan_RoleACLRule {
  id     Int @id @default(autoincrement())
  roleId Int

  role Role @relation(fields: [roleId], references: [id])

  readPermission  Boolean
  writePermission Boolean

  travelPlanId Int
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  @@unique([roleId, travelPlanId], name: "unique_role_travelPlan_constraint")
}

model TravelPlan_PublicACLRule {
  id       Int    @id @default(autoincrement())
  wildcard String

  readPermission  Boolean
  writePermission Boolean

  travelPlanId Int
  travelPlan   TravelPlan @relation(fields: [travelPlanId], references: [id], onDelete: Cascade)

  @@unique([wildcard, travelPlanId], name: "unique_wildcard_travelPlan_constraint")
}

//
// user-role.prisma
//

enum UserType {
  HUMAN
  ORG
  BOT
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  username     String  @unique
  friendlyName String?

  snsName String @unique @default(cuid())
  openId  String @unique @default(uuid())

  avatar String?
  bio    String?

  posts       Post[]
  travelPlans TravelPlan[]
  roles       RoleUser[]

  asFollowers Follow[] @relation(name: "AsFollowers")
  asFollowees Follow[] @relation(name: "AsFollowees")

  oauth2Bindings User_OAuth2[] @relation(name: "OAuth2_Binding")

  createdAt DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @default(now()) @updatedAt @db.Timestamptz(3)

  createdComments PostComment[] @relation(name: "comments")

  userType UserType @default(HUMAN)

  relatedOrganization Organization? @relation(name: "OrganizationRelatedUser")

  createdOrganizations Organization[] @relation(name: "OrganizationCreator")

  rolesInOrganization OrganizationUserRole[] @relation(name: "UserOrganizationUserRole")

  managedRobots Robot[] @relation(name: "RobotsBelongsToUser")

  relatedRobot           Robot?                   @relation(name: "RobotRelatedUser")
  Post_UserACLRule       Post_UserACLRule[]
  TravelPlan_UserACLRule TravelPlan_UserACLRule[]
}

model OAuth2 {
  id Int @id @default(autoincrement())

  provider String
  clientId String

  authUsers User_OAuth2[] @relation(name: "OAuth2_Providers")

  @@unique([provider, clientId], name: "unique_provider_clientId")
}

model User_OAuth2 {
  id Int @id @default(autoincrement())

  oauth2Id Int
  oauth2   OAuth2 @relation(name: "OAuth2_Providers", fields: [oauth2Id], references: [id])

  userId Int
  user   User @relation(name: "OAuth2_Binding", fields: [userId], references: [id])

  openId String

  avatar String?
  site   String?
  bio    String?

  createdAt DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @default(now()) @updatedAt @db.Timestamptz(3)

  @@unique([oauth2Id, userId, openId], name: "unique_provider_userId_clientId")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String
  users       RoleUser[]

  usersInOrganizations   OrganizationUserRole[]   @relation(name: "RoleOrganizationUserRole")
  Post_RoleACLRule       Post_RoleACLRule[]
  TravelPlan_RoleACLRule TravelPlan_RoleACLRule[]
}

model RoleUser {
  id     Int  @id @default(autoincrement())
  roleId Int
  userId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  createdAt DateTime @unique() @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @unique() @default(now()) @updatedAt @db.Timestamptz(3)

  @@index([roleId, userId], name: "unique_user_role")
}

//
// webhook.prisma
//

model WebHook {
  id      Int             @id @default(autoincrement())
  name    String          @unique
  url     String
  headers WebHookHeader[]
  events  WebHookEvent[]
}

model WebHookHeader {
  id        Int     @id @default(autoincrement())
  webHook   WebHook @relation(fields: [webHookId], references: [id])
  webHookId Int
  key       String
  value     String
}

model WebHookEvent {
  id        Int     @id @default(autoincrement())
  webHook   WebHook @relation(fields: [webHookId], references: [id])
  webHookId Int
  resource  String
  operation String
}
